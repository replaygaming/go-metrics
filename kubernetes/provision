#!/usr/bin/env ruby

require "erb"
require "open3"

class Provision
  class << self
    def call
      help if ARGV[0] == "-h" || ARGV[0] == "--help"

      ensure_secrets
      ensure_deployment
      puts "Metrics provisioned successfully for environment '#{environment}'"
    end

    def help
      puts "Usage: provision [environment] [topic_name] [subscription_name]"
      puts
      puts "Environment defaults to 'staging'"
      exit 1
    end

    def ensure_secrets
      ensure_pubsub
      ensure_metrics
    end

    def ensure_pubsub
      return if Kernel.system(*%W[kubectl get secret/pubsub -o name], err: :out, out: "/dev/null")

      abort "PubSub secrets are not configured. Make sure you have them provisioned from the infrastructure repository."
    end

    def ensure_metrics
      return if Kernel.system(*%W[kubectl get secret/metrics -o name], err: :out, out: "/dev/null")

      abort "Metrics secrets are not configured. Make sure you have them provisioned from the create_secrets script."
    end

    def ensure_deployment
      deployment_file = File.join(File.expand_path("..", __FILE__), "deployment.yaml.erb")
      resource = ERB.new(File.read(deployment_file)).result(binding)
      kube_apply(resource) || abort("Error applying deployment")
    end

    def environment
      ARGV[0] || "staging"
    end

    def topic_name
      return ARGV[1] if ARGV[1]

      case environment
      when "staging"
        "metrics-staging"
      when "production"
        "metrics"
      else
        abort("Don't know what topic name to use for this environment. Please provide one. See --help for more information")
      end
    end

    def subscription_name
      return ARGV[2] if ARGV[2]

      case environment
      when "staging"
        "metrics_workers_staging"
      when "production"
        "metrics_workers"
      else
        abort("Don't know what subscription name to use for this environment. Please provide one. See --help for more information")
      end
    end

    def kube_apply(resource)
      Open3.popen2e("kubectl apply --record=true -f -") do |stdin, out_err, wait_thr|
        stdin.write resource
        stdin.close
        output = out_err.read
        if wait_thr.value.success?
          true
        else
          puts output
          false
        end
      end
    end
  end
end

Provision.call
